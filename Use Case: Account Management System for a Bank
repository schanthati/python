import uuid
from datetime import datetime
class Account:
    def __init__(self, name, initial_balance):
        self.account_number = uuid.uuid4().hex[:6].upper()  # Generate unique account number
        self.name [self.name] = name
        self.balance = initial_balance
        self.transactions = []
    def deposit(self, amount):
        self.balance += amount
        self.transactions.append((datetime.now(), 'Deposit', amount))
    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
            self.transactions.append((datetime.now(), 'Withdrawal', amount))
        else:
            print("Insufficient funds.")
    def transfer(self, recipient_account, amount):
        if amount <= self.balance:
            self.balance -= amount
            self.transactions.append((datetime.now(), 'Transfer to ' + recipient_account.account_number, amount))
            recipient_account.deposit(amount)
        else:
            print("Insufficient funds for transfer.")
    def get_transaction_history(self):
        print("Transaction History for Account:", self.account_number)
        for timestamp, transaction_type, amount in self.transactions:
            print(f"{timestamp} - {transaction_type}: ${amount:.2f}")
        print("Current Balance:", self.balance)
 
# Main function
if __name__ == "__main__":
    # Create accounts
    account1 = Account("John Doe", 1000)
    account2 = Account("Jane Smith", 500)
    # Perform transactions
    account1.deposit(500)
    account1.withdraw(200)
    account1.transfer(account2, 300)
    # Display transaction history and balances
    account1.get_transaction_history()
    print("\n")
    account2.get_transaction_history()

 
